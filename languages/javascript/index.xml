<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Development Cheat Sheets</title><link>http://example.org/languages/javascript/index.html</link><description>Recent content in JavaScript on Development Cheat Sheets</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="http://example.org/languages/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Arrays</title><link>http://example.org/languages/javascript/arrays/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/arrays/index.html</guid><description>This page contains information, and simple code examples, about the use of Arrays in JavaScript.
Introducing Arrays Arrays allow you to store an ordered list of data of any type. The order of the elements are preserved and the keys are automatically assigned. An array can also store mixed data types (e.g. booleans, Strings, and objects can all exist in the same array).
Defining an Array //Empty Array var myArray = []; var daysOfTheWeek = [&amp;#39;Sunday&amp;#39;, &amp;#39;Monday&amp;#39;, &amp;#39;Tuesday&amp;#39;]; // Array storing mixed types var arrayOfStuff = [ {&amp;#39;name&amp;#39;: &amp;#39;value&amp;#39;}, [1,2,3], true, &amp;#39;nifty&amp;#39; ]; Accessing Array Items Arrays use a 0 based index, so the index of the first element an array is 0.</description></item><item><title>Basic Syntax</title><link>http://example.org/languages/javascript/syntax/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/syntax/index.html</guid><description>This page contains handy information on the basics of the Javascript Syntax.
Basic JavaScript types/primatives The basic JavaScript Types/primatives are:
String Boolean Number BigInt Null Undefined Symbol (starting in ES6) Object Variables Can be named anything that starts with a letter, underscore ( _ ), or dollar sign ( $ ).
var monster1 = &amp;quot;Grover&amp;quot;, monster2 = &amp;quot;Cookie Monster&amp;quot;;
camelCase is a common naming convention used for Javascript variables.
You cannot use reserved words (such as var) for variable names.</description></item><item><title>Classes</title><link>http://example.org/languages/javascript/classes/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/classes/index.html</guid><description>This page contains more detailed information about classes in JavaScript.
Introduction The class keyword was introduced to help developers migrating from other languages. It is Syntactic Sugar and doesn&amp;rsquo;t really change the way that the programming language works.
Ultimately classes get turned into JavaScript prototypes eventually.
Constructor A constructor is a special function that is called immediately after the object is created. It can be used to hold any initialisation logic (such as initialise any properties) for the object before it is used.</description></item><item><title>Helpful resources</title><link>http://example.org/languages/javascript/resources/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/resources/index.html</guid><description>Eloquent Javascript A free online book which is updated regularly available at: eloquentjavascript.net
You Don&amp;rsquo;t Know JS (yet) A series of short helpful books on Javascript available at: github.com/getify/You-Dont-Know-JS
Mozilla Developer Network One of the finest online Javascript resources https://developers.mozilla.org/en-US/docs/Web/JavaScript/Reference</description></item><item><title>Imports</title><link>http://example.org/languages/javascript/imports/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/imports/index.html</guid><description>This page contains information, and simple code examples, about the use of the JavaScript imports.
Introducing Imports JavaScript Imports come in several flavours (read syntaxes) that have been introduced as the language has evolved (ES5 -&amp;gt; ES6 etc.). The different syntaxes also provide different functionality.
ES6 Imports In ES6 the import syntax is a declarative import syntax, it does not execute any functions. So if you want to call a function you&amp;rsquo;ll need two lines:</description></item><item><title>Jest</title><link>http://example.org/languages/javascript/jest/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/jest/index.html</guid><description>&lt;p>&lt;a href="https://jestjs.io/en/" target="_blank">Jest&lt;/a> is a JavaScript Testing Framework with a focus on simplicity. It is compatible with many frameworks (including node) and TypeScript.&lt;/p></description></item><item><title>Libraries</title><link>http://example.org/languages/javascript/libraries/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/libraries/index.html</guid><description>This page contains some information about some handy or popular JavaScript libraries or frameworks.
Lodash Lodash is a popular library with methods which can help with type checking.
Importing Lodash The recommended way to import lodash is on a per function basis:
import isArray from &amp;#39;lodash/isArray&amp;#39;; Because lodash holds all it&amp;rsquo;s functions in a single file, so rather than import the whole &amp;rsquo;lodash&amp;rsquo; library at 100k, it&amp;rsquo;s better to just import lodash&amp;rsquo;s has function which is maybe 2k.</description></item><item><title>Node.js</title><link>http://example.org/languages/javascript/node_js/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/node_js/index.html</guid><description>Node.js is an open-source, cross-platform, JavaScript runtime environment that executes JavaScript code outside of a browser.
Node.js lets developers use JavaScript to write command line tools and for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user&amp;rsquo;s web browser.
Consequently, Node.js represents a &amp;ldquo;JavaScript everywhere&amp;rdquo; paradigm, unifying web-application development around a single programming language, rather than different languages for server- and client-side scripts.</description></item><item><title>React</title><link>http://example.org/languages/javascript/react/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/react/index.html</guid><description/></item><item><title>Tools</title><link>http://example.org/languages/javascript/tools/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/tools/index.html</guid><description>This page contains some information about some tools that help with JavaScript development.
Code Formatting Prettier is a popular code formatting tool which can automatically apply white spaces to make javascript more readable.
Dynamic Imports Browser support for Dynamic Imports is still a bit flakey so tools (such as webpack and rollup.js) have been written to help with this.
Package Managers Package managers help with downloading all the required libraries to run your JavaScript code.</description></item><item><title>UI Components</title><link>http://example.org/languages/javascript/ui_components/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/ui_components/index.html</guid><description>This page contains some information about common, or handy, UI (browser) components in Javascript.
The window Object There is a global window object available when working in a browser, all global variables are properties of the window object.
Confirmation Window The confirmation window is available in every browser and will create a simple popup dialog requesting the user to select a button.
var answer = window.confirm(&amp;#34;Click OK, get true. Click CANCEL, get false.</description></item><item><title>Versions and Transpilers</title><link>http://example.org/languages/javascript/versions/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/languages/javascript/versions/index.html</guid><description>Versions ECMASscript 5 (also known as ES5) is compatible with all major web browers.
There are newer versions (ECMAScript 2015 a.k.a. ES6) released every year, but to maintain backwards compatibility you may need to use a Transpiler to convert it into ES5 or ES6.
Transpilers bablejs.io is a popular Transpiler.</description></item></channel></rss>